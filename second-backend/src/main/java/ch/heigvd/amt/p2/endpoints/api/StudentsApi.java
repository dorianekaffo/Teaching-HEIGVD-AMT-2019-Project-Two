/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ch.heigvd.amt.p2.endpoints.api;

import java.math.BigDecimal;
import ch.heigvd.amt.p2.model.Student;
import io.swagger.annotations.*;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-02T04:27:12.447Z")

@Api(value = "students", description = "the students API")
public interface StudentsApi {

    @Secured("hasRole('ADMIN')")
    @ApiOperation(value = "Créer un étudiant", nickname = "createStudent", notes = "Créer un étudiant", response = Student.class, tags={ "student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "L'étudiant a été créé", response = Student.class) })
    @RequestMapping(value = "/students",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Student> createStudent(@ApiParam(value = "L'étudiant à créer" ,required=true )  @Valid @RequestBody Student body);


    @ApiOperation(value = "Supprimer un étudiant", nickname = "deleteStudent", notes = "Supprime l'étudiant d'identifiant `id` correspondant ainsi que tout enrôlement lié", tags={ "student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "L'identifiant fourni est invalide"),
        @ApiResponse(code = 404, message = "L'étudiant est introuvable") })
    @RequestMapping(value = "/students/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<String> deleteStudent(@ApiParam(value = "identifiant de l'étudiant à supprimer",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Récupère l'étudiant d'identifiant correspondant", nickname = "getStudentById", notes = "Retourne l'étudiant avec l'identifiant `id`", response = Student.class, tags={ "student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Etudiant récupéré", response = Student.class),
        @ApiResponse(code = 400, message = "Identifiant fourni est invalide"),
        @ApiResponse(code = 404, message = "Personne non trouvée") })
    @RequestMapping(value = "/students/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Student> getStudentById(@ApiParam(value = "Identifiant de l'étudiant",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Liste de tous les étudiants", nickname = "getStudents", notes = "Liste complète de tous les étudiants", response = Student.class, responseContainer = "List", tags={ "student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Tous les étudiants", response = Student.class, responseContainer = "List") })
    @RequestMapping(value = "/students",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Student>> getStudents(Pageable pgble);


    @ApiOperation(value = "Mets à jour l'étudiant d'identifiant correspondant", nickname = "updateStudent", notes = "Mets à jour les attributs de l'étudiant avec pour identifiant `id`", tags={ "student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "L'identifiant fourni est invalide"),
        @ApiResponse(code = 404, message = "L'étudiant est introuvable") })
    @RequestMapping(value = "/students/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateStudent(@ApiParam(value = "Identifiant de l'étudiant à mettre à jour",required=true) @PathVariable("id") Long id,@ApiParam(value = "Etudiant à mettre à jour" ,required=true )  @Valid @RequestBody Student body);

}
