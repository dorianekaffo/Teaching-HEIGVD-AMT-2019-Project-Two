swagger: "2.0"
info:
  description: "Ce serveur a été construit dans le cadre du deuxième projet de l'AMT 2019. Ceci regroupe les APIs du premier backend du projet."
  version: "1.0.0"
  title: "AMT 2019 - Project Two API - Premier backend"
  termsOfService: ""
host: "localhost:8080"
basePath: "/"
tags:
- name: "user"
  description: "Les opérations sur les utilisateurs"
- name: "auth"
  description: "Les opérations pour l'authentification des utilisateur"
schemes:
- "http"
paths:
  /users:
    post:
      tags:
      - "user"
      summary: "Créer un utilisateur"
      description: "Crée un nouvel utilisateur"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        description: "Contient le token d'authentification sous la forme `Bearer {token}`"
        type: string
        required: true
      - in: "body"
        name: "body"
        description: "Utilisateur à créer"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "Opération réussie"
          schema:
            $ref: "#/definitions/User"
    get:
      tags:
      - "user"
      summary: "Liste de tous les utilisateurs"
      description: "Liste complète de tous les utilisateurs"
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        description: "Contient le token d'authentification sous la forme `Bearer {token}`"
        type: string
        required: true
      responses:
        default:
          description: "Tous les utilisateurs"
  /users/{email}:
    get:
      tags:
      - "user"
      summary: "Récupère un utilisateur avec l'email correspondant"
      description: "Récupère un utilisateur avec l'`email` correspondant"
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        description: "Contient le token d'authentification sous la forme `Bearer {token}`"
        type: string
        required: true
      - name: "email"
        in: "path"
        description: "Email de l'utilisateur à récupérer"
        required: true
        type: "string"
      responses:
        200:
          description: "Opération réussie"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Email invalide"
        404:
          description: "Utilisateur non trouvée"
    put:
      tags:
      - "user"
      summary: "Mettre à jour un utilisateur"
      description: "Mets à jour l'utilisateur avec l'`email` correspondant. Ne peut qu'être fait par un utilisateur connecté"
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        description: "Contient le token d'authentification sous la forme `Bearer {token}`"
        type: string
        required: true
      - name: "email"
        in: "path"
        description: "email de l'utilisateur à mettre à jour"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Utilisateur à mettre à jour"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Email invalide"
        404:
          description: "Utilisateur non retrouvé"
    delete:
      tags:
      - "user"
      summary: "Supprime un utilisateur"
      description: "Supprime un utilisateur avec `email` comme adresse email. Cette action ne peut qu'être effectué par l'administrateur"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        type: string
        required: true
      - name: "email"
        in: "path"
        description: "Email de l'utilisateur à supprimer"
        required: true
        type: "string"
      responses:
        400:
          description: "Email invalide"
        404:
          description: "Utilisateur non trouvée"
  /users/block/{email}:
    put:
      tags:
      - "user"
      summary: "Bloque l'utilisateur ayant l'email correspondant"
      description: "Bloque l'utilisateur ayant l'`email` correspondant"
      operationId: "blockUser"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        type: string
        required: true
      - in: path
        name: email
        type: "string"
        required: true
      responses:
        default:
          description: "Utilisateur bloqué"
    delete:
      tags:
      - "user"
      summary: "Débloque l'utilisateur ayant l'email correspondant"
      description: "Débloque l'utilisateur ayant l'email correspondant"
      operationId: "unblockUSer"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        type: string
        required: true
      - in: path
        name: email
        type: "string"
        required: true
      responses:
        default:
          description: "Utilisateur débloqué"
          schema:
            type: "string"
  /users/password:
    put:
      tags:
      - "user"
      summary: "Change le mot de passe de l'utilisateur"
      description: "Change le mot de passe de l'utilisateur"
      operationId: "changePassword"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        type: string
        required: true
      - in: "body"
        name: "changePassword"
        required: true
        schema:
          type: "object"
          properties:
            newPassword:
              type: "string"
            oldPassword:
              type: "string"
      responses:
        default:
          description: "Opération réussie"
          schema:
            type: "string"
    post:
      tags:
      - "user"
      summary: "Attribut un nouveau mot de passe à l'utilisateur"
      description: "Attribut un nouveau mot de passe suite à une réinitialisation"
      operationId: "resetPassword"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "resetPassword"
        required: true
        schema:
          type: "object"
          properties:
            token:
              type: "string"
            newPassword:
              type: "string"
      responses:
        default:
          description: "Mot de passe changé"
  /users/reset-password:
    post:
      tags:
      - "user"
      summary: "Envoi le mail pour la réinitialisation du mot de passe"
      description: "Envoi le mail de réinitialisation"
      operationId: "forgotPassword"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "userId"
        required: true
        schema:
          type: "object"
          properties:
            userId:
              type: string
      responses:
        default:
          description: "Mail de réinitialisation envoyé"
    get:
      tags:
      - "user"
      summary: "Ouvre la page pour le changement de mot de passe"
      description: "Ouvre la page pour le changement du mot de passe"
      operationId: "resetPasswordPage"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "token"
        required: true
        type: "string"
      responses:
        default:
          description: "Page pour réinitialisation du mot de passe"
          schema:
            type: "string"
  /users/code:
    get:
      tags:
      - "user"
      summary: "Envoi un code vers à l'adresse mail renseigné"
      description: "Envoi un code vers l'adresse mail correspondant"
      operationId: "getCode"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "email"
        required: true
        type: "string"
      responses:
        default:
          description: "Code envoyé à l'email"
          schema:
            type: "string"
    post:
      tags:
      - "user"
      summary: "Vérification du code"
      description: "Vérifie le code qui a été envoyé par mail"
      operationId: "checkCode"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "codeCheck"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: string
            code:
              type: string
      responses:
        default:
          description: "Feedback sur la vérification du code"
  /auth/login:
    get:
      tags:
      - "auth"
      summary: "Se connecter à la plateforme"
      description: "Se connecter à la plateforme en fournissant les identifiants"
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "credentials"
        in: "body"
        description: "Les identifiants de l'utilisateur"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
            password:
              type: "string"
      responses:
        200:
          description: "token"
          schema:
            type: "string"
        400:
          description: "email ou mot de passe invalide"
  /auth/logout:
    get:
      tags:
      - "auth"
      summary: "Se déconnecter de la plateforme"
      description: "Se déconnecter de la plateforme"
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        description: "Contient le token d'authentification sous la forme `Bearer {token}`"
        type: string
        required: true
      responses:
        default:
          description: "Opération réussie"
          schema:
            type: "string"
definitions:
  User:
    type: "object"
    properties:
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      roles:
        type: "array"
        items:
          $ref: "#/definitions/Role"
      blocked:
        type: "boolean"
        default: false
  Role:
    type: "object"
    properties:
      id:
        type: "number"
      type:
        type: "string"
