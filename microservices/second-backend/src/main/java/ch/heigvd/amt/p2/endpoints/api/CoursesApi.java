/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ch.heigvd.amt.p2.endpoints.api;

import java.math.BigDecimal;

import ch.heigvd.amt.p2.model.Course;
import io.swagger.annotations.*;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-02T04:27:12.447Z")

@Api(value = "courses", description = "the courses API")
public interface CoursesApi {

    @Secured("hasRole('ADMIN')")
    @ApiOperation(value = "Crée un cours", nickname = "createCourse", notes = "Crée un nouveau cours", response = Course.class, tags={ "course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Le cours a été créé", response = Course.class) })
    @RequestMapping(value = "/courses",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Course> createCourse(@ApiParam(value = "Cours à créer" ,required=true )  @Valid @RequestBody Course body);


    @ApiOperation(value = "Supprime un cours", nickname = "deleteCourse", notes = "Supprime un cours ainsi que tout enrôlements lié", tags={ "course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "L'identifiant fourni est invalide"),
        @ApiResponse(code = 404, message = "Le cours est introuvable") })
    @RequestMapping(value = "/courses/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<String> deleteCourse(@ApiParam(value = "identifiant du cours à supprimer",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Récupère le cours avec l'identifiant correspondant", nickname = "getCourseById", notes = "Récupère le cours d'identifiant `id`", response = Course.class, tags={ "course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cours récupéré", response = Course.class),
        @ApiResponse(code = 400, message = "L'identifiant fourni est invalide"),
        @ApiResponse(code = 404, message = "Le cours est introuvable") })
    @RequestMapping(value = "/courses/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Course> getCourseById(@ApiParam(value = "L'identifiant du cours",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Liste de tous les cours", nickname = "getCourses", notes = "Liste complète de tous les cours", response = Course.class, responseContainer = "List", tags={ "course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Tous les cours", response = Course.class, responseContainer = "List") })
    @RequestMapping(value = "/courses",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Course>> getCourses(Pageable pageable);


    @ApiOperation(value = "Mettre à jour un cours", nickname = "updateCourse", notes = "Mets à jour les informations sur le cours", response = Course.class, tags={ "course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cours mis à jour", response = Course.class),
        @ApiResponse(code = 400, message = "L'identifiant fourni est invalide"),
        @ApiResponse(code = 404, message = "Le cours est introuvable") })
    @RequestMapping(value = "/courses/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Course> updateCourse(@ApiParam(value = "identifiant du cours à mettre à jour",required=true) @PathVariable("id") Long id,@ApiParam(value = "Le cours à mettre à jour" ,required=true )  @Valid @RequestBody Course body);

}
